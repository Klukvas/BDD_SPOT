{"name": "test_one_step_swap_fixed_false[BCH-BTC]", "status": "failed", "statusDetails": {"message": "AssertionError: Ошибка при пополнении баланса\nassert None != None", "trace": "request = <FixtureRequest for <Function test_one_step_swap_fixed_false[BCH-BTC]>>, _pytest_bdd_example = {'fromAsset': 'BCH', 'toAsset': 'BTC'}\n\n    @pytest.mark.usefixtures(*args)\n    def scenario_wrapper(request, _pytest_bdd_example):\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:132: in _execute_scenario\n    request.config.hook.pytest_bdd_before_scenario(request=request, feature=feature, scenario=scenario)\n.venv/lib/python3.9/site-packages/pluggy/_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n.venv/lib/python3.9/site-packages/pluggy/_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nrequest = <FixtureRequest for <Function test_one_step_swap_fixed_false[BCH-BTC]>>, feature = <pytest_bdd.parser.Feature object at 0x7fe189d35220>\nscenario = <pytest_bdd.parser.Scenario object at 0x7fe189c09e20>\n\n    def pytest_bdd_before_scenario(request, feature, scenario):\n        print(f'\\n\\nStarted new scenario:{scenario.name}\\nFeature: {feature.name}\\n')\n        if scenario.name in ['Make a swap with fixed True', 'Make a swap with fixed False', 'Make a transfer by phone',\n            'Make a transfer by address', 'Transfer(waiting for user)', 'Internal withdrawal']:\n            print('call upd balance')\n            assets_for_update = []\n            if scenario.name in ['Transfer(waiting for user)', 'Internal withdrawal']:\n                token = Auth(settings.template_tests_email, settings.template_tests_password).authenticate()\n                client_Id = settings.template_tests_client_id\n            else:\n                token = Auth(settings.me_tests_email, settings.me_tests_password).authenticate()\n                client_Id = settings.me_tests_client_id\n    \n            balances = Wallet().balances(token[0])\n            assets_not_in_balance = [\n                asset\n                for asset in settings.balance_asssets.keys()\n                if asset not in [\n                        asset['assetId']\n                        for asset in balances\n                        if asset['assetId'] in settings.balance_asssets.keys()\n                    ]\n            ]\n            if len(assets_not_in_balance):\n                for item in assets_not_in_balance:\n                    assets_for_update.append(\n                        [\n                            item,\n                            settings.balance_asssets[item]\n                        ]\n                    )\n            if len(balances):\n                for item in balances:\n                    if item['assetId'] in settings.balance_asssets.keys():\n                        if item['balance'] < settings.balance_asssets[item['assetId']]:\n                            correct_amount = settings.balance_asssets[item['assetId']] - item['balance']\n                            assets_for_update.append(\n                                [\n                                    item['assetId'],\n                                    correct_amount\n                                ]\n                            )\n                        elif item['balance'] > settings.balance_asssets[item['assetId']]:\n                            correct_amount = (item['balance'] - settings.balance_asssets[item['assetId']] ) * -1\n                            assets_for_update.append(\n                                [\n                                    item['assetId'],\n                                    correct_amount\n                                ]\n                            )\n            else:\n                for item in settings.balance_asssets.items():\n                    assets_for_update.append(\n                        item[0],\n                        item[1]\n                    )\n            for item in assets_for_update:\n                bl_change_result = changeBalance(\n                    client_Id,\n                    item[1],\n                    f'SP-{client_Id}',\n                    item[0]\n                )\n>               assert bl_change_result != None, 'Ошибка при пополнении баланса'\nE               AssertionError: Ошибка при пополнении баланса\nE               assert None != None\n\nconftest.py:86: AssertionError"}, "description": "../features/swap.feature: Make a swap with fixed False", "parameters": [{"name": "_pytest_bdd_example", "value": "{'fromAsset': 'BCH', 'toAsset': 'BTC'}"}], "start": 1641412535564, "stop": 1641412541795, "uuid": "58216b9e-ebf1-4cbb-9bbe-b19cdfbffb25", "historyId": "b421715dc41a6e13ae582bf76c1361b8", "testCaseId": "2d80ae57a2c535462ea70e2d1b7cc6ac", "fullName": "tests.test_swap#test_one_step_swap_fixed_false", "labels": [{"name": "feature", "value": "swap"}, {"name": "story", "value": "fixed False"}, {"name": "tag", "value": "@pytest.mark.usefixtures"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_swap"}, {"name": "host", "value": "MacBook-Pro-Apple.local"}, {"name": "thread", "value": "58162-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_swap"}]}