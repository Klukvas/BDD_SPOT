{"name": "Make a swap with fixed True [ETH-EUR]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected that quote will be dict, but returned:\n  [{'result': 'KycNotPassed'}].\n  From asset: ETH; Toasset: EUR\nassert <class 'list'> == <class 'dict'>\n  +<class 'list'>\n  -<class 'dict'>", "trace": "request = <FixtureRequest for <Function test_one_step_swap_fixed_true[ETH-EUR]>>, _pytest_bdd_example = {'fromAsset': 'ETH', 'toAsset': 'EUR'}\n\n    @pytest.mark.usefixtures(*args)\n    def scenario_wrapper(request, _pytest_bdd_example):\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:144: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:114: in _execute_step_function\n    return_value = step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nget_balance = ['iGZNtbXqCwmxN/pBSzsOelgVgtKNf7QdHUESB+vUhENry7Ly0DPX47zkmJxW09XDANs6i6AK9qv0gRJ+k4FALub0VrExY1zwuj+Qv0Jw6xMn5lXsCJaQ...: 0, 'apr': 0, 'apy': 0, 'assetId': 'LTC', ...}, {'accumulationAmount': 0, 'apr': 0, 'apy': 0, 'assetId': 'USD', ...}]]\nfromAsset = 'ETH', toAsset = 'EUR'\n\n    @allure.title(\"This test has a custom title\")\n    @when(parsers.parse('User gets swap quote with fixed True from {fromAsset} to {toAsset}'), target_fixture=\"get_quote\")\n    def get_quote(get_balance, fromAsset, toAsset):\n        swapApi = Swap()\n        quote = swapApi.get_quote(\n            get_balance[0],\n            fromAsset,\n            toAsset,\n            settings.balance_asssets[fromAsset]/2\n        )\n        print(f'quote: {quote}')\n>       assert type(quote) == dict, f'Expected that quote will be dict, but returned:\\n{quote}.\\nFrom asset: {fromAsset}; Toasset: {toAsset}'\nE       AssertionError: Expected that quote will be dict, but returned:\nE         [{'result': 'KycNotPassed'}].\nE         From asset: ETH; Toasset: EUR\nE       assert <class 'list'> == <class 'dict'>\nE         +<class 'list'>\nE         -<class 'dict'>\n\ntests/test_swap.py:31: AssertionError"}, "steps": [{"name": "Given Some crypto on balance", "status": "passed", "start": 1641481072610, "stop": 1641481074456}, {"name": "When User gets swap quote with fixed True from ETH to EUR", "status": "failed", "statusDetails": {"message": "Expected that quote will be dict, but returned:\n  [{'result': 'KycNotPassed'}].\n  From asset: ETH; Toasset: EUR\nassert <class 'list'> == <class 'dict'>\n  +<class 'list'>\n  -<class 'dict'>", "trace": "AssertionError: Expected that quote will be dict, but returned:\n  [{'result': 'KycNotPassed'}].\n  From asset: ETH; Toasset: EUR\nassert <class 'list'> == <class 'dict'>\n  +<class 'list'>\n  -<class 'dict'>\n"}, "start": 1641481074457, "stop": 1641481075118}], "parameters": [{"name": "_pytest_bdd_example", "value": {"fromAsset": "ETH", "toAsset": "EUR"}}], "start": 1641481070186, "stop": 1641481075119, "uuid": "bf4361c6-6bbb-bb46-761b-bdcd1baeccff", "historyId": "bf4361c66bbbbb46761bbdcd1baeccff", "fullName": "features/swap.feature:Make a swap with fixed True", "labels": [{"name": "host", "value": "MacBook-Pro-Apple.local"}, {"name": "thread", "value": "3611-MainThread"}, {"name": "framework", "value": "pytest-bdd"}, {"name": "language", "value": "cpython3"}, {"name": "feature", "value": "Swap"}]}