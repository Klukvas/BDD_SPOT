{"name": "Success withdrawal or transfer && deposit [BTC-tb1q8gw6s94t43tz2rkpy4yerekkuuw6whrt5rhjar-basereceiver1]", "status": "failed", "statusDetails": {"message": "AssertionError: assert <class 'NoneType'> == dict\n +  where <class 'NoneType'> = type(None)", "trace": "request = <FixtureRequest for <Function test_success_deposit_withdrawal[BTC-tb1q8gw6s94t43tz2rkpy4yerekkuuw6whrt5rhjar-basereceiver1]>>\n_pytest_bdd_example = {'address_phone': 'tb1q8gw6s94t43tz2rkpy4yerekkuuw6whrt5rhjar', 'asset': 'BTC', 'email': 'basereceiver1'}\n\n    @pytest.mark.usefixtures(*args)\n    def scenario_wrapper(request, _pytest_bdd_example):\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:144: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:114: in _execute_step_function\n    return_value = step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncreate_operation = {'amount': 0.03, 'asset': 'BTC', 'operationId': '455', 'requestId': '72e1e01b-5656-45ab-a612-20fb15c7c2fe', ...}\napprove_opetarion = {'event_date': datetime.datetime(2022, 1, 14, 15, 55, 52)}\n\n    @then(\"User has new success withdrawal email\")\n    def check_success_withdrawal_email(create_operation, approve_opetarion):\n        counter = 0\n        while True:\n            sleep(5)\n            counter += 1\n            op_history = WalletHistory().operations_history(create_operation['token'], create_operation['asset'])\n            assert type(op_history) == list\n            approved_withdrawal = list(\n                filter(\n                    lambda x: create_operation[\"requestId\"] in x['operationId'],\n                    op_history\n                )\n            )\n            if  len(approved_withdrawal) == 1 and \\\n                approved_withdrawal[0]['status'] == 0:\n                break\n            elif counter > 5:\n                raise ValueError('Can not find operations with status 0 for 15 seconds')\n        success_withdrawal = MailParser(6, settings.template_tests_email, approve_opetarion['event_date'], withdrawal_asset = create_operation['asset'] ).parse_mail()\n>       assert type(success_withdrawal) == dict\nE       AssertionError: assert <class 'NoneType'> == dict\nE        +  where <class 'NoneType'> = type(None)\n\ntests/test_emails.py:391: AssertionError"}, "steps": [{"name": "Given User send withdrawal/transfer with asset: BTC, to address/phone tb1q8gw6s94t43tz2rkpy4yerekkuuw6whrt5rhjar", "status": "passed", "start": 1642168538886, "stop": 1642168541498}, {"name": "When User approve withdrawal/transfer by restApi", "status": "passed", "start": 1642168541499, "stop": 1642168553548}, {"name": "Then User has new success withdrawal email", "status": "failed", "statusDetails": {"message": "assert <class 'NoneType'> == dict\n +  where <class 'NoneType'> = type(None)", "trace": "AssertionError: assert <class 'NoneType'> == dict\n +  where <class 'NoneType'> = type(None)\n"}, "start": 1642168553548, "stop": 1642168621539}], "start": 1642168536873, "stop": 1642168621539, "uuid": "28a80186-6421-3ab6-5322-919489c7051d", "historyId": "28a8018664213ab65322919489c7051d", "fullName": "features/receive_email.feature:Success withdrawal or transfer && deposit", "labels": [{"name": "host", "value": "MacBook-Pro-Apple.local"}, {"name": "thread", "value": "30151-MainThread"}, {"name": "framework", "value": "pytest-bdd"}, {"name": "language", "value": "cpython3"}, {"name": "feature", "value": "Emails receive"}]}