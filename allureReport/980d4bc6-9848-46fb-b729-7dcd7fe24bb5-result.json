{"name": "Success withdrawal or transfer && deposit [LTC-+3803803803803801-basereceiver1]", "status": "failed", "statusDetails": {"message": "AssertionError: \u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0430\nassert None != None", "trace": "request = <FixtureRequest for <Function test_success_deposit_withdrawal[LTC-+3803803803803801-basereceiver1]>>\n_pytest_bdd_example = {'address_phone': '+3803803803803801', 'asset': 'LTC', 'email': 'basereceiver1'}\n\n    @pytest.mark.usefixtures(*args)\n    def scenario_wrapper(request, _pytest_bdd_example):\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:132: in _execute_scenario\n    request.config.hook.pytest_bdd_before_scenario(request=request, feature=feature, scenario=scenario)\n.venv/lib/python3.9/site-packages/pluggy/_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n.venv/lib/python3.9/site-packages/pluggy/_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <FixtureRequest for <Function test_success_deposit_withdrawal[LTC-+3803803803803801-basereceiver1]>>\nfeature = <pytest_bdd.parser.Feature object at 0x7ff1756e0ee0>\nscenario = <pytest_bdd.parser.Scenario object at 0x7ff1757c35b0>\n\n    def pytest_bdd_before_scenario(request, feature, scenario):\n        print(f'\\n\\nStarted new scenario:{scenario.name}\\nFeature: {feature.name}\\n')\n        if scenario.name in ['Make a swap', 'Make a transfer by phone',\n            'Make a transfer by address', 'Transfer(waiting for user)', 'Internal withdrawal', 'Success withdrawal or transfer && deposit']:\n            print('call upd balance')\n            assets_for_update = []\n            if scenario.name in ['Transfer(waiting for user)', 'Internal withdrawal', 'Success withdrawal or transfer && deposit']:\n                token = Auth(settings.template_tests_email, settings.template_tests_password).authenticate()\n                client_Id = settings.template_tests_client_id\n            else:\n                token = Auth(settings.me_tests_email, settings.me_tests_password).authenticate()\n                client_Id = settings.me_tests_client_id\n    \n            balances = Wallet().balances(token[0])\n            assets_not_in_balance = [\n                asset\n                for asset in settings.balance_asssets.keys()\n                if asset not in [\n                        asset['assetId']\n                        for asset in balances\n                        if asset['assetId'] in settings.balance_asssets.keys()\n                    ]\n            ]\n            if len(assets_not_in_balance):\n                for item in assets_not_in_balance:\n                    assets_for_update.append(\n                        [\n                            item,\n                            settings.balance_asssets[item]\n                        ]\n                    )\n            if len(balances):\n                for item in balances:\n                    if item['assetId'] in settings.balance_asssets.keys():\n                        if item['balance'] < settings.balance_asssets[item['assetId']]:\n                            correct_amount = settings.balance_asssets[item['assetId']] - item['balance']\n                            assets_for_update.append(\n                                [\n                                    item['assetId'],\n                                    correct_amount\n                                ]\n                            )\n                        elif item['balance'] > settings.balance_asssets[item['assetId']]:\n                            correct_amount = (item['balance'] - settings.balance_asssets[item['assetId']] ) * -1\n                            assets_for_update.append(\n                                [\n                                    item['assetId'],\n                                    correct_amount\n                                ]\n                            )\n            else:\n                for item in settings.balance_asssets.items():\n                    assets_for_update.append(\n                        item[0],\n                        item[1]\n                    )\n            for item in assets_for_update:\n                bl_change_result = changeBalance(\n                    client_Id,\n                    item[1],\n                    f'SP-{client_Id}',\n                    item[0]\n                )\n>               assert bl_change_result != None, '\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0430'\nE               AssertionError: \u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0430\nE               assert None != None\n\nconftest.py:110: AssertionError"}, "start": 1642168493782, "uuid": "f8ad6bd4-5b1a-af21-dd1a-ac942f3b8c5d", "historyId": "f8ad6bd45b1aaf21dd1aac942f3b8c5d", "fullName": "features/receive_email.feature:Success withdrawal or transfer && deposit", "labels": [{"name": "host", "value": "MacBook-Pro-Apple.local"}, {"name": "thread", "value": "30066-MainThread"}, {"name": "framework", "value": "pytest-bdd"}, {"name": "language", "value": "cpython3"}, {"name": "feature", "value": "Emails receive"}]}